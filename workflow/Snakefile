import pandas as pd
import numpy as np
import os
import re

configfile: "config/config.yml"

## Chromosome names
chrs = '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y'
chrnum = ['chr' + ii for ii in chrs.split()]

## Basenames
annotationbase = "gencode.v45.primary_assembly.annotation"
graphbase = "hprc-v1.1-mc-grch38"

## Test SRR 
testsample = "SRR15881903"
# , 'SRR15881955', 'SRR15881946', 'SRR15881891

## Load samples & set all columns to strings
df = pd.read_table(config['samples'])

## Check there are accessions
n = len(df.Run)
assert (n > 0), "No accessions were specified. Please add at least one SRA ID"

## Define key values
accessions = df.Run

## Constrain wildcards
wildcard_constraints:
	accession = "(" + '|'.join(accessions) + ")",

# All subsequent paths
gfa_path = ("/hpcfs/users/a1627307/genome/hprc-v1.1-mc-grch38.gfa")
gfa_full_path = ("/hpcfs/users/a1627307/genome/hprc-v1.1-mc-grch38.full.gfa")
gbz_path = ("/hpcfs/users/a1627307/genome/hprc-v1.1-mc-grch38.gbz")
gtf_path = ("/hpcfs/users/a1627307/genome/gencode.v45.primary_assembly.annotation.gtf")
refpath = ("/hpcfs/users/a1627307/genome/GRCh38.primary_assembly.genome.fa")
altrefpath = ("/hpcfs/users/a1627307/genome/GCA_000001405.15_GRCh38_genomic.fna")
vcfpath = ("/hpcfs/users/a1627307/vgrna_t2d/data/hprc-v1.1-mc-grch38.vcfbub.a100k.wave.vcf.gz")
trim_path = os.path.join("hpcfs", "users", "a1627307", 
						"star_t2d", "star_t2d", "data", "fastq", "trimmed")
log_path = os.path.join("workflow", "logs")
graph_outpath  = os.path.join("data", "graph")
annotation_outpath = os.path.join("data", "annotation")
index_outpath = os.path.join("data", "index")
gtf_rn = os.path.join(
            annotation_outpath, "gencode.v45.primary_assembly.annotation_renamed.gtf")
map_outpath = os.path.join("data", "mpmap")
maplog_path = os.path.join("output", "mpmap")

ALL_CONVERT = expand(
	os.path.join(graph_outpath, "vcf_fa_build", "{chrnum}.{base}.{suffix}"),
	chrnum = ['chr22'],
	base = graphbase,
	suffix = ['pg']
)

ALL_INDEX = expand(
	os.path.join(index_outpath, "chr22", "{base}.spliced.{suffix}"),
	base = ['chr22.d9'],
	suffix = ['gcsa', 'xg', 'dist']
)

# ALL_CONSTRUCTVG = expand(
# 	os.path.join(graph_outpath, "{chrnum}.{base}.{suffix}"),
# 	chrnum = chrnum,
# 	base = graphbase,
# 	suffix = ['vg']
# )

# ALL_CONVERTPG = expand(
# 	os.path.join(graph_outpath, "{chrnum}.{base}.{suffix}"),
# 	chrnum = ['chr22'],
# 	base = graphbase,
# 	suffix = ['pg']
# )

# # build from vcf/fa naming
# ALL_CONSTRUCTSPL = expand(
# 	os.path.join(graph_outpath, "{chrnum}.{base}.spliced.{suffix}"),
# 	chrnum = ['chr22'],
# 	base = graphbase,
# 	suffix = ['pg']
# )

# Build from HPRC naming
# ALL_CONSTRUCTSPL = expand(
# 	os.path.join(graph_outpath, "{chrnum}.d9.spliced.{suffix}"),
# 	chrnum = ['chr22'],
# 	suffix = ['pg']
# )

# ALL_PRUNE = expand(
# 	os.path.join(graph_outpath, "{base}.pruned.{suffix}"),
# 	base = graphbase,
# 	suffix = ['default.vg']
# )

# ALL_GCSA = expand(
# 	os.path.join(index_outpath, "{base}.{suffix}"),
# 	base = graphbase,
# 	suffix = ['gcsa']
# )

# ALL_MAP = expand(
# 	os.path.join(map_outpath, "{sample}.gamp"),
# 	sample = testsample
# )

# ALL_INDEXLOGS = expand(

# )

# ALL_CONVERT = expand(
# 	os.path.join(graph_outpath, graphbase + ".{suffix}"),
# 	suffix = ['pg']
# )

# ALL_CONSTRUCT = expand(
# 	os.path.join(graph_outpath, "chr22-spliced.{suffix}"),
# 	suffix = ['pg']
# )

# ALL_TRANSFORM = expand(
# 	os.path.join(annotation_outpath, "{chrnum}." + annotationbase + "_renamed.gtf"),
# 	chrnum = chrnum
# )

# ALL_SPLIT_GTF = expand(
# 	os.path.join(
#             annotation_outpath, "{chrnum}." + annotationbase + ".gtf"),
# 	chrnum = chrnum
# )

# ALL_XG = expand(
# 	os.path.join(
# 			index_outpath, "{base}-spliced.{suffix}"),
# 	base = ['chr22'],
# 	suffix = ['xg']		
# )

## Add this in when running out of storage or ready to do rpvg
## OR want to gen pantranscriptome
## need vcf also though. 
### Actualy need this for method 2
ALL_HAPL = expand(
	os.path.join(
		index_outpath, "chr22", "chr22.haplotypes.{suffix}"),
		suffix = ['gbwt']
)

ALL_GBWT = expand(
	os.path.join(
		index_outpath, "chr22", "{base}.{suffix}"),
		base = ['chr22'],
		suffix = ['gbwt']
)

ALL_OUTPUTS = []
ALL_OUTPUTS.extend(ALL_CONVERT)
# ALL_OUTPUTS.extend(ALL_INDEX)
# ALL_OUTPUTS.extend(ALL_CONSTRUCTVG)
# ALL_OUTPUTS.extend(ALL_CONVERTPG)
# ALL_OUTPUTS.extend(ALL_CONSTRUCTSPL)
ALL_OUTPUTS.extend(ALL_HAPL)
ALL_OUTPUTS.extend(ALL_GBWT)
# ALL_OUTPUTS.extend(ALL_PRUNE)
# ALL_OUTPUTS.extend(ALL_GCSA)
# ALL_OUTPUTS.extend(ALL_MAP)
# ALL_OUTPUTS.extend(ALL_CONSTRUCT)
# ALL_OUTPUTS.extend(ALL_TRANSFORM)
# ALL_OUTPUTS.extend(ALL_SPLIT_GTF)
# ALL_OUTPUTS.extend(ALL_XG)


rule all:
	input:
		ALL_OUTPUTS

include: "rules/convert.smk"
include: "rules/autoindex.smk"
# include: "rules/constructvg.smk"
# include: "rules/convertpg.smk"
# include: "rules/constructspl.smk"
# include: "rules/prune.smk"
# include: "rules/gcsa_index.smk"
# include: "rules/mpmap.smk"
# include: "rules/construct.smk"
# include: "rules/transform_gtf.smk"
# include: "rules/subset.smk"
# include: "rules/xg_index.smk"
include: "rules/gbwt_index.smk"
